package com.hpb.bc.contract.hpb;

import io.hpb.web3.abi.EventEncoder;
import io.hpb.web3.abi.TypeReference;
import io.hpb.web3.abi.datatypes.*;
import io.hpb.web3.abi.datatypes.generated.Bytes32;
import io.hpb.web3.abi.datatypes.generated.Uint256;
import io.hpb.web3.abi.datatypes.generated.Uint8;
import io.hpb.web3.crypto.Credentials;
import io.hpb.web3.protocol.Web3;
import io.hpb.web3.protocol.core.DefaultBlockParameter;
import io.hpb.web3.protocol.core.RemoteCall;
import io.hpb.web3.protocol.core.methods.request.HpbFilter;
import io.hpb.web3.protocol.core.methods.response.Log;
import io.hpb.web3.protocol.core.methods.response.TransactionReceipt;
import io.hpb.web3.tuples.generated.Tuple3;
import io.hpb.web3.tuples.generated.Tuple4;
import io.hpb.web3.tuples.generated.Tuple5;
import io.hpb.web3.tuples.generated.Tuple6;
import io.hpb.web3.tx.Contract;
import io.hpb.web3.tx.TransactionManager;
import io.hpb.web3.tx.gas.ContractGasProvider;
import io.reactivex.Flowable;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the the io.hpb.web3.codegen.SolidityFunctionWrapperGenerator to update.
 *
 * <p>Generated with web3 version none.
 */
@SuppressWarnings({
        "rawtypes",
        "unchecked"
})
public class ProposalBallot extends Contract {
    private static final String BINARY = "608060405267016345785d8a000060045562061a80600555336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600261010060405190810160405280600060ff1681526020016000600102815260200160006040519080825280602002602001820160405280156200016b5781602001602082028038833980820191505090505b5081526020016000604051908082528060200260200182016040528015620001a25781602001602082028038833980820191505090505b50815260200160008152602001600081526020016000815260200160008152509080600181540180825580915050906001820390600052602060002090600b02016000909192909190915060008201518160000160006101000a81548160ff021916908360ff1602179055506020820151816001015560408201518160020190805190602001906200023692919062000287565b50606082015181600301908051906020019062000255929190620002d9565b506080820151816007015560a0820151816008015560c0820151816009015560e082015181600a0155505050620003d6565b828054828255906000526020600020908101928215620002c6579160200282015b82811115620002c5578251825591602001919060010190620002a8565b5b509050620002d5919062000368565b5090565b82805482825590600052602060002090810192821562000355579160200282015b82811115620003545782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190620002fa565b5b50905062000364919062000390565b5090565b6200038d91905b80821115620003895760008160009055506001016200036f565b5090565b90565b620003d391905b80821115620003cf57600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555060010162000397565b5090565b90565b613a7080620003e66000396000f3fe608060405260043610610159576000357c0100000000000000000000000000000000000000000000000000000000900480630242cba4146101a957806307e3fcb0146101d4578063091949d9146102475780630996fb30146102a75780631fd8088d146102f9578063227fb41a1461032457806327e1f7df146103a85780632bb6c9d4146104115780632e1a7d4d14610463578063306419a6146104a957806341c0e1b5146104fc5780635968892f1461052b57806368734399146106125780636ec6d4a6146106f9578063704802751461074c578063736176c0146107b5578063893d20e8146109415780638ab9f472146109985780638b9b490214610a285780638da5cb5b14610a92578063a68982ed14610ae9578063b0775bbc14610c1f578063c34cf38a14610c8b578063dbbc830b14610e01578063eecb7db414610e92578063ef29ee9514610f22578063f2fde38b14610f5d575b3373ffffffffffffffffffffffffffffffffffffffff167f7129701436f0cdc265d1e2cda298e8a1ccd6ed5fce7f69343e16530b07a2e06e346040518082815260200191505060405180910390a2005b3480156101b557600080fd5b506101be610fc6565b6040518082815260200191505060405180910390f35b3480156101e057600080fd5b5061022d600480360360408110156101f757600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fcc565b604051808215151515815260200191505060405180910390f35b34801561025357600080fd5b5061028d6004803603604081101561026a57600080fd5b8101908080359060200190929190803560ff169060200190929190505050610fe0565b604051808215151515815260200191505060405180910390f35b3480156102b357600080fd5b506102f7600480360360608110156102ca57600080fd5b8101908080359060200190929190803560ff1690602001909291908035906020019092919050505061111e565b005b34801561030557600080fd5b5061030e611138565b6040518082815260200191505060405180910390f35b34801561033057600080fd5b5061037d6004803603604081101561034757600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061113e565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b3480156103b457600080fd5b506103f7600480360360208110156103cb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611292565b604051808215151515815260200191505060405180910390f35b34801561041d57600080fd5b506104616004803603606081101561043457600080fd5b810190808035906020019092919080359060200190929190803560ff169060200190929190505050611412565b005b61048f6004803603602081101561047957600080fd5b810190808035906020019092919050505061152d565b604051808215151515815260200191505060405180910390f35b3480156104b557600080fd5b506104e2600480360360208110156104cc57600080fd5b8101908080359060200190929190505050611621565b604051808215151515815260200191505060405180910390f35b34801561050857600080fd5b506105116116cd565b604051808215151515815260200191505060405180910390f35b34801561053757600080fd5b506105f86004803603604081101561054e57600080fd5b81019080803590602001909291908035906020019064010000000081111561057557600080fd5b82018360208201111561058757600080fd5b803590602001918460208302840111640100000000831117156105a957600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050611764565b604051808215151515815260200191505060405180910390f35b34801561061e57600080fd5b506106df6004803603604081101561063557600080fd5b81019080803590602001909291908035906020019064010000000081111561065c57600080fd5b82018360208201111561066e57600080fd5b8035906020019184602083028401116401000000008311171561069057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050611a84565b604051808215151515815260200191505060405180910390f35b34801561070557600080fd5b506107326004803603602081101561071c57600080fd5b8101908080359060200190929190505050611acf565b604051808215151515815260200191505060405180910390f35b34801561075857600080fd5b5061079b6004803603602081101561076f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b7b565b604051808215151515815260200191505060405180910390f35b3480156107c157600080fd5b506107ca611cf9565b60405180806020018060200180602001806020018060200186810386528b818151815260200191508051906020019060200280838360005b8381101561081d578082015181840152602081019050610802565b5050505090500186810385528a818151815260200191508051906020019060200280838360005b8381101561085f578082015181840152602081019050610844565b50505050905001868103845289818151815260200191508051906020019060200280838360005b838110156108a1578082015181840152602081019050610886565b50505050905001868103835288818151815260200191508051906020019060200280838360005b838110156108e35780820151818401526020810190506108c8565b50505050905001868103825287818151815260200191508051906020019060200280838360005b8381101561092557808201518184015260208101905061090a565b505050509050019a505050505050505050505060405180910390f35b34801561094d57600080fd5b50610956611f4c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156109a457600080fd5b506109d1600480360360208110156109bb57600080fd5b8101908080359060200190929190505050611f75565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610a145780820151818401526020810190506109f9565b505050509050019250505060405180910390f35b348015610a3457600080fd5b50610a6160048036036020811015610a4b57600080fd5b8101908080359060200190929190505050612016565b604051808560ff1660ff16815260200184815260200183815260200182815260200194505050505060405180910390f35b348015610a9e57600080fd5b50610aa761209d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610af557600080fd5b50610b3860048036036020811015610b0c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506120c2565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b83811015610b83578082015181840152602081019050610b68565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015610bc5578082015181840152602081019050610baa565b50505050905001848103825285818151815260200191508051906020019060200280838360005b83811015610c07578082015181840152602081019050610bec565b50505050905001965050505050505060405180910390f35b348015610c2b57600080fd5b50610c346122f5565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610c77578082015181840152602081019050610c5c565b505050509050019250505060405180910390f35b348015610c9757600080fd5b50610cc460048036036020811015610cae57600080fd5b8101908080359060200190929190505050612438565b6040518087815260200186815260200180602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b83811015610d1f578082015181840152602081019050610d04565b50505050905001858103845288818151815260200191508051906020019060200280838360005b83811015610d61578082015181840152602081019050610d46565b50505050905001858103835287818151815260200191508051906020019060200280838360005b83811015610da3578082015181840152602081019050610d88565b50505050905001858103825286818151815260200191508051906020019060200280838360005b83811015610de5578082015181840152602081019050610dca565b505050509050019a505050505050505050505060405180910390f35b348015610e0d57600080fd5b50610e5060048036036020811015610e2457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061281c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610e9e57600080fd5b50610ecb60048036036020811015610eb557600080fd5b810190808035906020019092919050505061284f565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610f0e578082015181840152602081019050610ef3565b505050509050019250505060405180910390f35b348015610f2e57600080fd5b50610f5b60048036036020811015610f4557600080fd5b8101908080359060200190929190505050612c8c565b005b348015610f6957600080fd5b50610fac60048036036020811015610f8057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612cf7565b604051808215151515815260200191505060405180910390f35b60055481565b6000610fd88383612d9d565b905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff16600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561107c57600080fd5b60006003600085815260200190815260200160002054905060008114151561111257826002828154811015156110ae57fe5b90600052602060002090600b020160000160006101000a81548160ff021916908360ff1602179055508260ff16847fe573f608441503a727e28767b6c25d6733d54f51e2324d957587c7c94dfa17a260405160405180910390a36001915050611118565b60009150505b92915050565b61112783612c8c565b61113333848385612f7a565b505050565b60045481565b6000806000806000600360008881526020019081526020016000205490506000811415151561116c57600080fd5b600060028281548110151561117d57fe5b90600052602060002090600b0201905060008160040160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008090506000809050600083141515611270578360050160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491508360060160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b8360070154846008015483839850985098509850505050505092959194509250565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112ef57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561138a57600080fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b6000600360008581526020019081526020016000205490506000811415151561143a57600080fd5b600060028281548110151561144b57fe5b90600052602060002090600b0201905060018360ff1614156114bc57838160050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156114b757600080fd5b61151a565b60008360ff16141561151957838160060160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561151857600080fd5b5b5b6115263386868661346a565b5050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561158a57600080fd5b813073ffffffffffffffffffffffffffffffffffffffff1631101515156115b057600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015611617573d6000803e3d6000fd5b5060019050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156116bd57600080fd5b8160058190555060019050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561172a57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b60008073ffffffffffffffffffffffffffffffffffffffff16600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561180057600080fd5b6000600360008581526020019081526020016000205490506000811415611a785760006001600261010060405190810160405280600160ff168152602001888152602001878152602001600060405190808252806020026020018201604052801561187a5781602001602082028038833980820191505090505b50815260200160008152602001600081526020016000815260200160008152509080600181540180825580915050906001820390600052602060002090600b02016000909192909190915060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160010155604082015181600201908051906020019061190c929190613905565b506060820151816003019080519060200190611929929190613952565b506080820151816007015560a0820151816008015560c0820151816009015560e082015181600a0155505003905060028181548110151561196657fe5b90600052602060002090600b0201600301600090806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050806003600087815260200190815260200160002081905550847f60d81aa5c058fc909d8254d2010e7eb1df51fdd46c7af1c4b28f7d549e3f8ce9856040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015611a5a578082015181840152602081019050611a3f565b505050509050019250505060405180910390a2600192505050611a7e565b60009150505b92915050565b600080600090505b8251811015611ac457611ab6848483815181101515611aa757fe5b90602001906020020151610fcc565b508080600101915050611a8c565b506001905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff16600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611b6b57600080fd5b8160048190555060019050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611bd857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611c7257600080fd5b81600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b606080606080606060006001600280549050039050600081111515611d1d57600080fd5b606081604051908082528060200260200182016040528015611d4e5781602001602082028038833980820191505090505b509050606082604051908082528060200260200182016040528015611d825781602001602082028038833980820191505090505b509050606083604051908082528060200260200182016040528015611db65781602001602082028038833980820191505090505b509050606084604051908082528060200260200182016040528015611dea5781602001602082028038833980820191505090505b509050606085604051908082528060200260200182016040528015611e1e5781602001602082028038833980820191505090505b5090506000600190505b8681111515611f2f576000600282815481101515611e4257fe5b90600052602060002090600b0201905080600101548760018403815181101515611e6857fe5b90602001906020020181815250508060000160009054906101000a900460ff168660018403815181101515611e9957fe5b9060200190602002019060ff16908160ff168152505060018160030180549050038560018403815181101515611ecb57fe5b906020019060200201818152505080600701548460018403815181101515611eef57fe5b906020019060200201818152505080600801548360018403815181101515611f1357fe5b9060200190602002018181525050508080600101915050611e28565b5084848484849a509a509a509a509a505050505050509091929394565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060006003600084815260200190815260200160002054905060008114151515611f9f57600080fd5b600281815481101515611fae57fe5b90600052602060002090600b020160020180548060200260200160405190810160405280929190818152602001828054801561200957602002820191906000526020600020905b815481526020019060010190808311611ff5575b5050505050915050919050565b6000806000806000600360008781526020019081526020016000205490506000811415151561204457600080fd5b600060028281548110151561205557fe5b90600052602060002090600b020190508060000160009054906101000a900460ff16600182600301805490500382600701548360080154955095509550955050509193509193565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060806060600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561210357600080fd5b6000600160028054905003905060008111151561211f57600080fd5b6060816040519080825280602002602001820160405280156121505781602001602082028038833980820191505090505b5090506060826040519080825280602002602001820160405280156121845781602001602082028038833980820191505090505b5090506060836040519080825280602002602001820160405280156121b85781602001602082028038833980820191505090505b5090506000600190505b84811115156122e05760006002828154811015156121dc57fe5b90600052602060002090600b020190508060010154856001840381518110151561220257fe5b90602001906020020181815250508060050160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846001840381518110151561226357fe5b90602001906020020181815250508060060160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600184038151811015156122c457fe5b90602001906020020181815250505080806001019150506121c2565b50828282965096509650505050509193909250565b60606000600160028054905003905060008111151561231357600080fd5b60008090506000600190505b828111151561237757600160028281548110151561233957fe5b90600052602060002090600b020160000160009054906101000a900460ff1660ff16141561236a5781806001019250505b808060010191505061231f565b506060816040519080825280602002602001820160405280156123a95781602001602082028038833980820191505090505b50905060008090506000600190505b848111151561242d5760016002828154811015156123d257fe5b90600052602060002090600b020160000160009054906101000a900460ff1660ff1614156124205780838381518110151561240957fe5b906020019060200201818152505081806001019250505b80806001019150506123b8565b508194505050505090565b6000806060806060806000600360008981526020019081526020016000205490506000811415151561246957600080fd5b600060028281548110151561247a57fe5b90600052602060002090600b02019050600081600901549050600082600a015490506060826040519080825280602002602001820160405280156124cd5781602001602082028038833980820191505090505b5090506060826040519080825280602002602001820160405280156125015781602001602082028038833980820191505090505b5090506060846040519080825280602002602001820160405280156125355781602001602082028038833980820191505090505b5090506060846040519080825280602002602001820160405280156125695781602001602082028038833980820191505090505b509050600080905060008090506000600190505b89600301805490508110156127d25760008a6003018281548110151561259f57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008b60050160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411156126c85780888581518110151561262557fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508a60050160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205486858151811015156126b157fe5b906020019060200201818152505083806001019450505b60008b60060160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411156127c45780878481518110151561272157fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508a60060160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485848151811015156127ad57fe5b906020019060200201818152505082806001019350505b50808060010191505061257d565b506127ee89600801548a6007015461363590919063ffffffff16565b60018a6003018054905003878688879f509f509f509f509f509f505050505050505050505091939550919395565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000821415151561286157600080fd5b600060028381548110151561287257fe5b90600052602060002090600b0201905060008090506000600190505b8260030180549050811015612a2357600083600301828154811015156128b057fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163190506000612a01856006016000876003018681548110151561291057fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054866005016000886003018781548110151561298d57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461363590919063ffffffff16565b905080821015612a145783806001019450505b5050808060010191505061288e565b50606081604051908082528060200260200182016040528015612a555781602001602082028038833980820191505090505b50905060008090506000600190505b8460030180549050811015612c7f5760008560030182815481101515612a8657fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163190506000612bd78760060160008960030186815481101515612ae657fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548860050160008a60030187815481101515612b6357fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461363590919063ffffffff16565b905080821015612c70578660030183815481101515612bf257fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168585815181101515612c2b57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505083806001019450505b50508080600101915050612a64565b5081945050505050919050565b600060036000838152602001908152602001600020549050600081118015612ce457506001600282815481101515612cc057fe5b90600052602060002090600b020160000160009054906101000a900460ff1660ff16145b15612cf357612cf281613651565b5b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612d5457600080fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b600080600284815481101515612daf57fe5b90600052602060002090600b0201905060008160050160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008260060160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000612e60828461363590919063ffffffff16565b905060008673ffffffffffffffffffffffffffffffffffffffff16319050600454811080612e8d57508181105b15612f6f576000612eb983612eab878561389e90919063ffffffff16565b6138d690919063ffffffff16565b90506000612ee284612ed4878661389e90919063ffffffff16565b6138d690919063ffffffff16565b9050600454821015612f0457612eff89886001015484600161346a565b612f28565b612f27898860010154612f20858a6138ec90919063ffffffff16565b600161346a565b5b600454811015612f4857612f4389886001015483600061346a565b612f6c565b612f6b898860010154612f6484896138ec90919063ffffffff16565b600061346a565b5b50505b505050505092915050565b6000600360008581526020019081526020016000205414151515612f9d57600080fd5b6004548210151515612fae57600080fd5b6000600360008581526020019081526020016000205490506000600282815481101515612fd757fe5b90600052602060002090600b0201905060018160000160009054906101000a900460ff1660ff1614151561300a57600080fd5b60008160040160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081141561310c576001826003018890806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550039050808260040160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b60018460ff1614156132305760008260050160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156131775781600901600081548092919060010191905055505b6131cb8260050160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548661363590919063ffffffff16565b8260050160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061322782600701548661363590919063ffffffff16565b82600701819055505b60008460ff1614156133545760008260060160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561329b5781600a01600081548092919060010191905055505b6132ef8260060160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548661363590919063ffffffff16565b8260060160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061334b82600801548661363590919063ffffffff16565b82600801819055505b8673ffffffffffffffffffffffffffffffffffffffff168460ff16877f040856a26bef1b829d84962dea3506defb0f1f921f77c38e985eabfb9b809bb5886040518082815260200191505060405180910390a461343c8260060160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548360050160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461363590919063ffffffff16565b8773ffffffffffffffffffffffffffffffffffffffff16311015151561346157600080fd5b50505050505050565b600060036000858152602001908152602001600020549050600060028281548110151561349357fe5b90600052602060002090600b0201905060018360ff161415613568576134c68482600701546138ec90919063ffffffff16565b8160070181905550613522848260050160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546138ec90919063ffffffff16565b8160050160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b60008360ff16141561362d5761358b8482600801546138ec90919063ffffffff16565b81600801819055506135e7848260060160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546138ec90919063ffffffff16565b8160060160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b505050505050565b6000818301905082811015151561364857fe5b80905092915050565b600060028281548110151561366257fe5b90600052602060002090600b020190506000600190505b8160030180549050811015613899576005545a101561369757613899565b600082600301828154811015156136aa57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008360050160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008460060160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000613778828461363590919063ffffffff16565b905060008473ffffffffffffffffffffffffffffffffffffffff163190506004548110806137a557508181105b156138875760006137d1836137c3878561389e90919063ffffffff16565b6138d690919063ffffffff16565b905060006137fa846137ec878661389e90919063ffffffff16565b6138d690919063ffffffff16565b905060045482101561381c57613817878a6001015484600161346a565b613840565b61383f878a60010154613838858a6138ec90919063ffffffff16565b600161346a565b5b6004548110156138605761385b878a6001015483600061346a565b613884565b613883878a6001015461387c84896138ec90919063ffffffff16565b600061346a565b5b50505b50505050508080600101915050613679565b505050565b6000808314156138b157600090506138d0565b81830290508183828115156138c257fe5b041415156138cc57fe5b8090505b92915050565b600081838115156138e357fe5b04905092915050565b60008282111515156138fa57fe5b818303905092915050565b828054828255906000526020600020908101928215613941579160200282015b82811115613940578251825591602001919060010190613925565b5b50905061394e91906139dc565b5090565b8280548282559060005260206000209081019282156139cb579160200282015b828111156139ca5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190613972565b5b5090506139d89190613a01565b5090565b6139fe91905b808211156139fa5760008160009055506001016139e2565b5090565b90565b613a4191905b80821115613a3d57600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101613a07565b5090565b9056fea165627a7a723058208413f85f66d35c8af2dce380885daa755dc132eb3bad6b587c259ac77fc9314e0029";

    public static final String FUNC_GASLEFTLIMIT = "gasLeftLimit";

    public static final String FUNC_REFRESHVOTEFORVOTERBYINDEX = "refreshVoteForVoterByIndex";

    public static final String FUNC_UPDATEPROPOSAL = "updateProposal";

    public static final String FUNC_VOTEPROPOSAL = "voteProposal";

    public static final String FUNC_MINLIMIT = "minLimit";

    public static final String FUNC_FETCHPROPOSALVOTENUMBYNOANDADDR = "fetchProposalVoteNumByNoandAddr";

    public static final String FUNC_DELETEADMIN = "deleteAdmin";

    public static final String FUNC_CANCELVOTEPROPOSAL = "cancelVoteProposal";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_SETGASLEFTLIMIT = "setGasLeftLimit";

    public static final String FUNC_KILL = "kill";

    public static final String FUNC_ADDPROPOSAL = "addProposal";

    public static final String FUNC_BATCHREFRESHVOTEFORVOTERBYINDEX = "batchRefreshVoteForVoterByIndex";

    public static final String FUNC_SETMINLIMIT = "setMinLimit";

    public static final String FUNC_ADDADMIN = "addAdmin";

    public static final String FUNC_FETCHALLPROPOSAL = "fetchAllProposal";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_FETCHPROPOSALDESC = "fetchProposalDesc";

    public static final String FUNC_FETCHPROPOSALVOTENUMBYNO = "fetchProposalVoteNumByNo";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_FETCHPROPOSALVOTENUMBYADDR = "fetchProposalVoteNumByAddr";

    public static final String FUNC_FETCHACTIVEINDEXS = "fetchActiveIndexs";

    public static final String FUNC_FETCHVOTEINFOFORPROPOSAL = "fetchVoteInfoForProposal";

    public static final String FUNC_ADMINMAP = "adminMap";

    public static final String FUNC_GETTOREFRESHADDRSBYPROPOSALINDEX = "getToRefreshAddrsByProposalIndex";

    public static final String FUNC_REFRESHVOTEFORALL = "refreshVoteForAll";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event DOPROPOSALVOTED_EVENT = new Event("DoProposalVoted",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Uint8>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event RECEIVEDHPB_EVENT = new Event("ReceivedHpb",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ADDPROPOSAL_EVENT = new Event("AddProposal",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<DynamicArray<Bytes32>>() {}));
    ;

    public static final Event UPDATEPROPOSAL_EVENT = new Event("UpdateProposal",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Uint8>(true) {}));
    ;

    @Deprecated
    protected ProposalBallot(String contractAddress, Web3 web3, Credentials credentials,
                             BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3, credentials, gasPrice, gasLimit);
    }

    protected ProposalBallot(String contractAddress, Web3 web3, Credentials credentials,
                             ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3, credentials, contractGasProvider);
    }

    @Deprecated
    protected ProposalBallot(String contractAddress, Web3 web3,
                             TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3, transactionManager, gasPrice, gasLimit);
    }

    protected ProposalBallot(String contractAddress, Web3 web3,
                             TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3, transactionManager, contractGasProvider);
    }

    public RemoteCall<BigInteger> gasLeftLimit() {
        final Function function = new Function(FUNC_GASLEFTLIMIT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> refreshVoteForVoterByIndex(BigInteger index,
                                                                     String voterAddr) {
        final Function function = new Function(
                FUNC_REFRESHVOTEFORVOTERBYINDEX, 
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index),
                new io.hpb.web3.abi.datatypes.Address(voterAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateProposal(byte[] no, BigInteger status) {
        final Function function = new Function(
                FUNC_UPDATEPROPOSAL,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Bytes32(no),
                new io.hpb.web3.abi.datatypes.generated.Uint8(status)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> voteProposal(byte[] no, BigInteger flag, BigInteger num) {
        final Function function = new Function(
                FUNC_VOTEPROPOSAL,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Bytes32(no),
                new io.hpb.web3.abi.datatypes.generated.Uint8(flag),
                new io.hpb.web3.abi.datatypes.generated.Uint256(num)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> minLimit() {
        final Function function = new Function(FUNC_MINLIMIT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>> fetchProposalVoteNumByNoandAddr(byte[] no,
                                                                                                              String voteAddr) {
        final Function function = new Function(FUNC_FETCHPROPOSALVOTENUMBYNOANDADDR,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Bytes32(no),
                new io.hpb.web3.abi.datatypes.Address(voteAddr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, BigInteger, BigInteger, BigInteger> call() throws
                            Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> deleteAdmin(String addr) {
        final Function function = new Function(
                FUNC_DELETEADMIN,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> cancelVoteProposal(byte[] no, BigInteger num,
                                                             BigInteger flag) {
        final Function function = new Function(
                FUNC_CANCELVOTEPROPOSAL,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Bytes32(no),
                new io.hpb.web3.abi.datatypes.generated.Uint256(num),
                new io.hpb.web3.abi.datatypes.generated.Uint8(flag)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> withdraw(BigInteger _value, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_WITHDRAW,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> setGasLeftLimit(BigInteger _gasLeftLimit) {
        final Function function = new Function(
                FUNC_SETGASLEFTLIMIT,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(_gasLeftLimit)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> kill() {
        final Function function = new Function(
                FUNC_KILL,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addProposal(byte[] no, List<byte[]> _desc) {
        final Function function = new Function(
                FUNC_ADDPROPOSAL,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Bytes32(no),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.generated.Bytes32>(
                        io.hpb.web3.abi.datatypes.generated.Bytes32.class,
                        io.hpb.web3.abi.Utils.typeMap(_desc, io.hpb.web3.abi.datatypes.generated.Bytes32.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> batchRefreshVoteForVoterByIndex(BigInteger index,
                                                                          List<String> voterAddrs) {
        final Function function = new Function(
                FUNC_BATCHREFRESHVOTEFORVOTERBYINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.datatypes.Address.class,
                        io.hpb.web3.abi.Utils.typeMap(voterAddrs, io.hpb.web3.abi.datatypes.Address.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setMinLimit(BigInteger _minLimit) {
        final Function function = new Function(
                FUNC_SETMINLIMIT,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(_minLimit)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addAdmin(String addr) {
        final Function function = new Function(
                FUNC_ADDADMIN,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple5<List<byte[]>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>> fetchAllProposal() {
        final Function function = new Function(FUNC_FETCHALLPROPOSAL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint8>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple5<List<byte[]>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>>(
                new Callable<Tuple5<List<byte[]>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple5<List<byte[]>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>> call()
                            throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<List<byte[]>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Bytes32>) results.get(0).getValue()),
                                convertToNative((List<Uint8>) results.get(1).getValue()),
                                convertToNative((List<Uint256>) results.get(2).getValue()),
                                convertToNative((List<Uint256>) results.get(3).getValue()),
                                convertToNative((List<Uint256>) results.get(4).getValue()));
                    }
                });
    }

    public RemoteCall<String> getOwner() {
        final Function function = new Function(FUNC_GETOWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<List> fetchProposalDesc(byte[] no) {
        final Function function = new Function(FUNC_FETCHPROPOSALDESC,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Bytes32(no)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>> fetchProposalVoteNumByNo(byte[] no) {
        final Function function = new Function(FUNC_FETCHPROPOSALVOTENUMBYNO,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Bytes32(no)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, BigInteger, BigInteger, BigInteger> call() throws
                            Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple3<List<byte[]>, List<BigInteger>, List<BigInteger>>> fetchProposalVoteNumByAddr(String voterAddr) {
        final Function function = new Function(FUNC_FETCHPROPOSALVOTENUMBYADDR,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(voterAddr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple3<List<byte[]>, List<BigInteger>, List<BigInteger>>>(
                new Callable<Tuple3<List<byte[]>, List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple3<List<byte[]>, List<BigInteger>, List<BigInteger>> call() throws
                            Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<List<byte[]>, List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Bytes32>) results.get(0).getValue()),
                                convertToNative((List<Uint256>) results.get(1).getValue()),
                                convertToNative((List<Uint256>) results.get(2).getValue()));
                    }
                });
    }

    public RemoteCall<List> fetchActiveIndexs() {
        final Function function = new Function(FUNC_FETCHACTIVEINDEXS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<Tuple6<BigInteger, BigInteger, List<String>, List<BigInteger>, List<String>, List<BigInteger>>> fetchVoteInfoForProposal(byte[] no) {
        final Function function = new Function(FUNC_FETCHVOTEINFOFORPROPOSAL,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Bytes32(no)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple6<BigInteger, BigInteger, List<String>, List<BigInteger>, List<String>, List<BigInteger>>>(
                new Callable<Tuple6<BigInteger, BigInteger, List<String>, List<BigInteger>, List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple6<BigInteger, BigInteger, List<String>, List<BigInteger>, List<String>, List<BigInteger>> call()
                            throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<BigInteger, BigInteger, List<String>, List<BigInteger>, List<String>, List<BigInteger>>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                convertToNative((List<Address>) results.get(2).getValue()),
                                convertToNative((List<Uint256>) results.get(3).getValue()),
                                convertToNative((List<Address>) results.get(4).getValue()),
                                convertToNative((List<Uint256>) results.get(5).getValue()));
                    }
                });
    }

    public RemoteCall<String> adminMap(String param0) {
        final Function function = new Function(FUNC_ADMINMAP,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<List> getToRefreshAddrsByProposalIndex(BigInteger index) {
        final Function function = new Function(FUNC_GETTOREFRESHADDRSBYPROPOSALINDEX,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> refreshVoteForAll(byte[] no) {
        final Function function = new Function(
                FUNC_REFRESHVOTEFORALL,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Bytes32(no)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<DoProposalVotedEventResponse> getDoProposalVotedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DOPROPOSALVOTED_EVENT, transactionReceipt);
        ArrayList<DoProposalVotedEventResponse> responses = new ArrayList<DoProposalVotedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DoProposalVotedEventResponse typedResponse = new DoProposalVotedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.no = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.flag = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.voterAddr = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.num = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DoProposalVotedEventResponse> doProposalVotedEventFlowable(HpbFilter filter) {
        return web3.hpbLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DoProposalVotedEventResponse>() {
            @Override
            public DoProposalVotedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DOPROPOSALVOTED_EVENT, log);
                DoProposalVotedEventResponse typedResponse = new DoProposalVotedEventResponse();
                typedResponse.log = log;
                typedResponse.no = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.flag = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.voterAddr = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.num = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DoProposalVotedEventResponse> doProposalVotedEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DOPROPOSALVOTED_EVENT));
        return doProposalVotedEventFlowable(filter);
    }

    public List<ReceivedHpbEventResponse> getReceivedHpbEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(RECEIVEDHPB_EVENT, transactionReceipt);
        ArrayList<ReceivedHpbEventResponse> responses = new ArrayList<ReceivedHpbEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReceivedHpbEventResponse typedResponse = new ReceivedHpbEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReceivedHpbEventResponse> receivedHpbEventFlowable(HpbFilter filter) {
        return web3.hpbLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ReceivedHpbEventResponse>() {
            @Override
            public ReceivedHpbEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RECEIVEDHPB_EVENT, log);
                ReceivedHpbEventResponse typedResponse = new ReceivedHpbEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ReceivedHpbEventResponse> receivedHpbEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RECEIVEDHPB_EVENT));
        return receivedHpbEventFlowable(filter);
    }

    public List<AddProposalEventResponse> getAddProposalEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ADDPROPOSAL_EVENT, transactionReceipt);
        ArrayList<AddProposalEventResponse> responses = new ArrayList<AddProposalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddProposalEventResponse typedResponse = new AddProposalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.no = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._desc = (List<byte[]>) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddProposalEventResponse> addProposalEventFlowable(HpbFilter filter) {
        return web3.hpbLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AddProposalEventResponse>() {
            @Override
            public AddProposalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADDPROPOSAL_EVENT, log);
                AddProposalEventResponse typedResponse = new AddProposalEventResponse();
                typedResponse.log = log;
                typedResponse.no = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._desc = (List<byte[]>) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AddProposalEventResponse> addProposalEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDPROPOSAL_EVENT));
        return addProposalEventFlowable(filter);
    }

    public List<UpdateProposalEventResponse> getUpdateProposalEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEPROPOSAL_EVENT, transactionReceipt);
        ArrayList<UpdateProposalEventResponse> responses = new ArrayList<UpdateProposalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateProposalEventResponse typedResponse = new UpdateProposalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.no = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.status = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpdateProposalEventResponse> updateProposalEventFlowable(HpbFilter filter) {
        return web3.hpbLogFlowable(filter).map(new io.reactivex.functions.Function<Log, UpdateProposalEventResponse>() {
            @Override
            public UpdateProposalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATEPROPOSAL_EVENT, log);
                UpdateProposalEventResponse typedResponse = new UpdateProposalEventResponse();
                typedResponse.log = log;
                typedResponse.no = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.status = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpdateProposalEventResponse> updateProposalEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATEPROPOSAL_EVENT));
        return updateProposalEventFlowable(filter);
    }

    @Deprecated
    public static ProposalBallot load(String contractAddress, Web3 web3, Credentials credentials,
                                      BigInteger gasPrice, BigInteger gasLimit) {
        return new ProposalBallot(contractAddress, web3, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static ProposalBallot load(String contractAddress, Web3 web3,
                                      TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ProposalBallot(contractAddress, web3, transactionManager, gasPrice, gasLimit);
    }

    public static ProposalBallot load(String contractAddress, Web3 web3, Credentials credentials,
                                      ContractGasProvider contractGasProvider) {
        return new ProposalBallot(contractAddress, web3, credentials, contractGasProvider);
    }

    public static ProposalBallot load(String contractAddress, Web3 web3,
                                      TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new ProposalBallot(contractAddress, web3, transactionManager, contractGasProvider);
    }

    public static RemoteCall<ProposalBallot> deploy(Web3 web3, Credentials credentials,
                                                    ContractGasProvider contractGasProvider, BigInteger initialWeiValue) {
        return deployRemoteCall(ProposalBallot.class, web3, credentials, contractGasProvider, BINARY, "", initialWeiValue);
    }

    public static RemoteCall<ProposalBallot> deploy(Web3 web3,
                                                    TransactionManager transactionManager, ContractGasProvider contractGasProvider,
                                                    BigInteger initialWeiValue) {
        return deployRemoteCall(ProposalBallot.class, web3, transactionManager, contractGasProvider, BINARY, "", initialWeiValue);
    }

    @Deprecated
    public static RemoteCall<ProposalBallot> deploy(Web3 web3, Credentials credentials,
                                                    BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployRemoteCall(ProposalBallot.class, web3, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    @Deprecated
    public static RemoteCall<ProposalBallot> deploy(Web3 web3,
                                                    TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit,
                                                    BigInteger initialWeiValue) {
        return deployRemoteCall(ProposalBallot.class, web3, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static class DoProposalVotedEventResponse {
        public Log log;

        public byte[] no;

        public BigInteger flag;

        public String voterAddr;

        public BigInteger num;
    }

    public static class ReceivedHpbEventResponse {
        public Log log;

        public String sender;

        public BigInteger amount;
    }

    public static class AddProposalEventResponse {
        public Log log;

        public byte[] no;

        public List<byte[]> _desc;
    }

    public static class UpdateProposalEventResponse {
        public Log log;

        public byte[] no;

        public BigInteger status;
    }
}
