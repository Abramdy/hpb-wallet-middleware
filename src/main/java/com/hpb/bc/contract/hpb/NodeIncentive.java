package com.hpb.bc.contract.hpb;

import io.hpb.web3.abi.EventEncoder;
import io.hpb.web3.abi.TypeReference;
import io.hpb.web3.abi.datatypes.*;
import io.hpb.web3.abi.datatypes.generated.Uint256;
import io.hpb.web3.abi.datatypes.generated.Uint8;
import io.hpb.web3.crypto.Credentials;
import io.hpb.web3.protocol.Web3;
import io.hpb.web3.protocol.core.DefaultBlockParameter;
import io.hpb.web3.protocol.core.RemoteCall;
import io.hpb.web3.protocol.core.methods.request.HpbFilter;
import io.hpb.web3.protocol.core.methods.response.Log;
import io.hpb.web3.protocol.core.methods.response.TransactionReceipt;
import io.hpb.web3.tuples.generated.Tuple2;
import io.hpb.web3.tuples.generated.Tuple6;
import io.hpb.web3.tx.Contract;
import io.hpb.web3.tx.TransactionManager;
import io.hpb.web3.tx.gas.ContractGasProvider;
import io.reactivex.Flowable;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the the io.hpb.web3.codegen.SolidityFunctionWrapperGenerator to update.
 *
 * <p>Generated with web3 version none.
 */
@SuppressWarnings({
        "rawtypes",
        "unchecked"
})
public class NodeIncentive extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_DEFAULTBONUSPERCENTAGE = "defaultBonusPercentage";

    public static final String FUNC_SETDEFAULTBONUSPERCENTAGE = "setDefaultBonusPercentage";

    public static final String FUNC_DELETEADMIN = "deleteAdmin";

    public static final String FUNC_SETNODEBALLOTADDR = "setNodeBallotAddr";

    public static final String FUNC_SENDBONUSBATCH = "sendBonusBatch";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_SETGASLEFTLIMIT = "setGasLeftLimit";

    public static final String FUNC_ADDCANDIDATE = "addCandidate";

    public static final String FUNC_FETCHALLCANDIDATES = "fetchAllCandidates";

    public static final String FUNC_KILL = "kill";

    public static final String FUNC_CALSCOREDATABATCH = "calScoreDataBatch";

    public static final String FUNC_CANDIDATEDEPOSIT = "candidateDeposit";

    public static final String FUNC_SENDBONUSALL = "sendBonusAll";

    public static final String FUNC_SETBALLOTBONUS = "setBallotBonus";

    public static final String FUNC_DOVOTED = "doVoted";

    public static final String FUNC_ADDADMIN = "addAdmin";

    public static final String FUNC_FETCHVOTESCOREFORVOTER = "fetchVoteScoreForVoter";

    public static final String FUNC_CANDIDATEINDEXMAP = "candidateIndexMap";

    public static final String FUNC_ADDALLCANDIDATE = "addAllCandidate";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_GASRATE = "gasRate";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_NODEBALLOTADDR = "nodeBallotAddr";

    public static final String FUNC_VOTERINDEXMAP = "voterIndexMap";

    public static final String FUNC_DELETECANDIDATE = "deleteCandidate";

    public static final String FUNC_SETGASRATE = "setGasRate";

    public static final String FUNC_SETCANSETBONUSPERCENTAGE = "setCanSetBonusPercentage";

    public static final String FUNC_ISAPPROVED = "isApproved";

    public static final String FUNC_SETBONUSPERCENTAGE = "setBonusPercentage";

    public static final String FUNC_FETCHALLVOTERADDRS = "fetchAllVoterAddrs";

    public static final String FUNC_SENDBONUS = "sendBonus";

    public static final String FUNC_GETBONUSPERCENTAGE = "getBonusPercentage";

    public static final String FUNC_CANSETBONUSPERCENTAGE = "canSetBonusPercentage";

    public static final String FUNC_INITDATABATCH = "initDataBatch";

    public static final String FUNC_BATCHADDCANDIDATE = "batchAddCandidate";

    public static final String FUNC_FETCHVOTESCOREDETAILFORCANDIDATE = "fetchVoteScoreDetailForCandidate";

    public static final String FUNC_SETAPPROVAL = "setApproval";

    public static final String FUNC_ADMINMAP = "adminMap";

    public static final String FUNC_FETCHCANDIDATES = "fetchCandidates";

    public static final String FUNC_FETCHVOTERSCOREFORVOTERTOCANDIDATE = "fetchVoterScoreForVoterToCandidate";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_SETDEFAULTOPERATOR = "setDefaultOperator";

    public static final Event APPROVALFOR_EVENT = new Event("ApprovalFor",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TOVOTEBONUS_EVENT = new Event("ToVoteBonus",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SENDBONUS_EVENT = new Event("SendBonus",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event RECEIVEDHPB_EVENT = new Event("ReceivedHpb",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected NodeIncentive(String contractAddress, Web3 web3, Credentials credentials,
                            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3, credentials, gasPrice, gasLimit);
    }

    protected NodeIncentive(String contractAddress, Web3 web3, Credentials credentials,
                            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3, credentials, contractGasProvider);
    }

    @Deprecated
    protected NodeIncentive(String contractAddress, Web3 web3,
                            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3, transactionManager, gasPrice, gasLimit);
    }

    protected NodeIncentive(String contractAddress, Web3 web3,
                            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3, transactionManager, contractGasProvider);
    }

    public RemoteCall<BigInteger> defaultBonusPercentage() {
        final Function function = new Function(FUNC_DEFAULTBONUSPERCENTAGE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setDefaultBonusPercentage(BigInteger _defaultBonusPercentage) {
        final Function function = new Function(
                FUNC_SETDEFAULTBONUSPERCENTAGE, 
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint8(_defaultBonusPercentage)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> deleteAdmin(String addr) {
        final Function function = new Function(
                FUNC_DELETEADMIN,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setNodeBallotAddr(String _nodeBallotAddr) {
        final Function function = new Function(
                FUNC_SETNODEBALLOTADDR,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_nodeBallotAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> sendBonusBatch(List<String> _candidateAddrs) {
        final Function function = new Function(
                FUNC_SENDBONUSBATCH,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.datatypes.Address.class,
                        io.hpb.web3.abi.Utils.typeMap(_candidateAddrs, io.hpb.web3.abi.datatypes.Address.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> withdraw(BigInteger _value, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_WITHDRAW,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> setGasLeftLimit(BigInteger gasLeftLimit) {
        final Function function = new Function(
                FUNC_SETGASLEFTLIMIT,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(gasLeftLimit)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addCandidate(String _candidateAddr) {
        final Function function = new Function(
                FUNC_ADDCANDIDATE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_candidateAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple6<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>> fetchAllCandidates() {
        final Function function = new Function(FUNC_FETCHALLCANDIDATES,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint8>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint8>>() {}));
        return new RemoteCall<Tuple6<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>>(
                new Callable<Tuple6<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple6<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>> call()
                            throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()),
                                convertToNative((List<Uint8>) results.get(1).getValue()),
                                convertToNative((List<Uint256>) results.get(2).getValue()),
                                convertToNative((List<Uint256>) results.get(3).getValue()),
                                convertToNative((List<Uint256>) results.get(4).getValue()),
                                convertToNative((List<Uint8>) results.get(5).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> kill() {
        final Function function = new Function(
                FUNC_KILL,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> calScoreDataBatch(List<String> candidateAddrs,
                                                            String fetchVoteInterfaceAddr) {
        final Function function = new Function(
                FUNC_CALSCOREDATABATCH,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.datatypes.Address.class,
                        io.hpb.web3.abi.Utils.typeMap(candidateAddrs, io.hpb.web3.abi.datatypes.Address.class)),
                new io.hpb.web3.abi.datatypes.Address(fetchVoteInterfaceAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> candidateDeposit(String _candidateAddr,
                                                           BigInteger weiValue) {
        final Function function = new Function(
                FUNC_CANDIDATEDEPOSIT,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_candidateAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> sendBonusAll() {
        final Function function = new Function(
                FUNC_SENDBONUSALL,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setBallotBonus(List<String> _candidateAddrs,
                                                         List<BigInteger> bonus) {
        final Function function = new Function(
                FUNC_SETBALLOTBONUS,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.datatypes.Address.class,
                        io.hpb.web3.abi.Utils.typeMap(_candidateAddrs, io.hpb.web3.abi.datatypes.Address.class)),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.generated.Uint256>(
                        io.hpb.web3.abi.datatypes.generated.Uint256.class,
                        io.hpb.web3.abi.Utils.typeMap(bonus, io.hpb.web3.abi.datatypes.generated.Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> doVoted(String voterAddr, String candidateAddr,
                                                  BigInteger num, BigInteger blockNumber) {
        final Function function = new Function(
                FUNC_DOVOTED,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(voterAddr),
                new io.hpb.web3.abi.datatypes.Address(candidateAddr),
                new io.hpb.web3.abi.datatypes.generated.Uint256(num),
                new io.hpb.web3.abi.datatypes.generated.Uint256(blockNumber)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addAdmin(String addr) {
        final Function function = new Function(
                FUNC_ADDADMIN,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<List<String>, List<BigInteger>>> fetchVoteScoreForVoter(String voterAddr) {
        final Function function = new Function(FUNC_FETCHVOTESCOREFORVOTER,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(voterAddr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple2<List<String>, List<BigInteger>>>(
                new Callable<Tuple2<List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<String>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()),
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<BigInteger> candidateIndexMap(String param0) {
        final Function function = new Function(FUNC_CANDIDATEINDEXMAP,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addAllCandidate(String fetchVoteInterfaceAddr) {
        final Function function = new Function(
                FUNC_ADDALLCANDIDATE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(fetchVoteInterfaceAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getOwner() {
        final Function function = new Function(FUNC_GETOWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> gasRate() {
        final Function function = new Function(FUNC_GASRATE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> nodeBallotAddr() {
        final Function function = new Function(FUNC_NODEBALLOTADDR,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> voterIndexMap(String param0) {
        final Function function = new Function(FUNC_VOTERINDEXMAP,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> deleteCandidate(String _candidateAddr) {
        final Function function = new Function(
                FUNC_DELETECANDIDATE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_candidateAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setGasRate(BigInteger _gasRate) {
        final Function function = new Function(
                FUNC_SETGASRATE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint8(_gasRate)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setCanSetBonusPercentage(Boolean _canSetBonusPercentage) {
        final Function function = new Function(
                FUNC_SETCANSETBONUSPERCENTAGE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Bool(_canSetBonusPercentage)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isApproved(String addr, String operator) {
        final Function function = new Function(FUNC_ISAPPROVED,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(addr),
                new io.hpb.web3.abi.datatypes.Address(operator)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> setBonusPercentage(String _candidateAddr,
                                                             BigInteger _bonusPercentage) {
        final Function function = new Function(
                FUNC_SETBONUSPERCENTAGE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_candidateAddr),
                new io.hpb.web3.abi.datatypes.generated.Uint8(_bonusPercentage)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> fetchAllVoterAddrs() {
        final Function function = new Function(FUNC_FETCHALLVOTERADDRS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> sendBonus(String _candidateAddr) {
        final Function function = new Function(
                FUNC_SENDBONUS,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_candidateAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getBonusPercentage(String _candidateAddr) {
        final Function function = new Function(FUNC_GETBONUSPERCENTAGE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_candidateAddr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> canSetBonusPercentage() {
        final Function function = new Function(FUNC_CANSETBONUSPERCENTAGE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> initDataBatch(List<String> voterAddrs,
                                                        List<String> candidateAddrs, List<BigInteger> nums, BigInteger blockNumber) {
        final Function function = new Function(
                FUNC_INITDATABATCH,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.datatypes.Address.class,
                        io.hpb.web3.abi.Utils.typeMap(voterAddrs, io.hpb.web3.abi.datatypes.Address.class)),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.datatypes.Address.class,
                        io.hpb.web3.abi.Utils.typeMap(candidateAddrs, io.hpb.web3.abi.datatypes.Address.class)),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.generated.Uint256>(
                        io.hpb.web3.abi.datatypes.generated.Uint256.class,
                        io.hpb.web3.abi.Utils.typeMap(nums, io.hpb.web3.abi.datatypes.generated.Uint256.class)),
                new io.hpb.web3.abi.datatypes.generated.Uint256(blockNumber)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> batchAddCandidate(List<String> _candidateAddrs) {
        final Function function = new Function(
                FUNC_BATCHADDCANDIDATE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.datatypes.Address.class,
                        io.hpb.web3.abi.Utils.typeMap(_candidateAddrs, io.hpb.web3.abi.datatypes.Address.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<List<String>, List<BigInteger>>> fetchVoteScoreDetailForCandidate(String candidateAddr) {
        final Function function = new Function(FUNC_FETCHVOTESCOREDETAILFORCANDIDATE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(candidateAddr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple2<List<String>, List<BigInteger>>>(
                new Callable<Tuple2<List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<String>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()),
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setApproval(String to, Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVAL,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(to),
                new io.hpb.web3.abi.datatypes.Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> adminMap(String param0) {
        final Function function = new Function(FUNC_ADMINMAP,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple6<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>> fetchCandidates(List<String> _candidateAddrs) {
        final Function function = new Function(FUNC_FETCHCANDIDATES,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.datatypes.Address.class,
                        io.hpb.web3.abi.Utils.typeMap(_candidateAddrs, io.hpb.web3.abi.datatypes.Address.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint8>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint8>>() {}));
        return new RemoteCall<Tuple6<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>>(
                new Callable<Tuple6<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple6<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>> call()
                            throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<List<String>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()),
                                convertToNative((List<Uint8>) results.get(1).getValue()),
                                convertToNative((List<Uint256>) results.get(2).getValue()),
                                convertToNative((List<Uint256>) results.get(3).getValue()),
                                convertToNative((List<Uint256>) results.get(4).getValue()),
                                convertToNative((List<Uint8>) results.get(5).getValue()));
                    }
                });
    }

    public RemoteCall<BigInteger> fetchVoterScoreForVoterToCandidate(String voterAddr,
                                                                     String candidateAddr) {
        final Function function = new Function(FUNC_FETCHVOTERSCOREFORVOTERTOCANDIDATE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(voterAddr),
                new io.hpb.web3.abi.datatypes.Address(candidateAddr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setDefaultOperator(String defaultOperator) {
        final Function function = new Function(
                FUNC_SETDEFAULTOPERATOR,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(defaultOperator)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<ApprovalForEventResponse> getApprovalForEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFOR_EVENT, transactionReceipt);
        ArrayList<ApprovalForEventResponse> responses = new ArrayList<ApprovalForEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForEventResponse typedResponse = new ApprovalForEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.approved = (Boolean) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForEventResponse> approvalForEventFlowable(HpbFilter filter) {
        return web3.hpbLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ApprovalForEventResponse>() {
            @Override
            public ApprovalForEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFOR_EVENT, log);
                ApprovalForEventResponse typedResponse = new ApprovalForEventResponse();
                typedResponse.log = log;
                typedResponse.approved = (Boolean) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.owner = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForEventResponse> approvalForEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFOR_EVENT));
        return approvalForEventFlowable(filter);
    }

    public List<ToVoteBonusEventResponse> getToVoteBonusEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TOVOTEBONUS_EVENT, transactionReceipt);
        ArrayList<ToVoteBonusEventResponse> responses = new ArrayList<ToVoteBonusEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ToVoteBonusEventResponse typedResponse = new ToVoteBonusEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.candidateAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.voterAddr = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.score = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.bonus = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ToVoteBonusEventResponse> toVoteBonusEventFlowable(HpbFilter filter) {
        return web3.hpbLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ToVoteBonusEventResponse>() {
            @Override
            public ToVoteBonusEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TOVOTEBONUS_EVENT, log);
                ToVoteBonusEventResponse typedResponse = new ToVoteBonusEventResponse();
                typedResponse.log = log;
                typedResponse.candidateAddr = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.voterAddr = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.score = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.bonus = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ToVoteBonusEventResponse> toVoteBonusEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TOVOTEBONUS_EVENT));
        return toVoteBonusEventFlowable(filter);
    }

    public List<SendBonusEventResponse> getSendBonusEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SENDBONUS_EVENT, transactionReceipt);
        ArrayList<SendBonusEventResponse> responses = new ArrayList<SendBonusEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SendBonusEventResponse typedResponse = new SendBonusEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.candidateAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.score = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.bonus = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SendBonusEventResponse> sendBonusEventFlowable(HpbFilter filter) {
        return web3.hpbLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SendBonusEventResponse>() {
            @Override
            public SendBonusEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SENDBONUS_EVENT, log);
                SendBonusEventResponse typedResponse = new SendBonusEventResponse();
                typedResponse.log = log;
                typedResponse.candidateAddr = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.score = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.bonus = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SendBonusEventResponse> sendBonusEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SENDBONUS_EVENT));
        return sendBonusEventFlowable(filter);
    }

    public List<ReceivedHpbEventResponse> getReceivedHpbEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(RECEIVEDHPB_EVENT, transactionReceipt);
        ArrayList<ReceivedHpbEventResponse> responses = new ArrayList<ReceivedHpbEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReceivedHpbEventResponse typedResponse = new ReceivedHpbEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReceivedHpbEventResponse> receivedHpbEventFlowable(HpbFilter filter) {
        return web3.hpbLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ReceivedHpbEventResponse>() {
            @Override
            public ReceivedHpbEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RECEIVEDHPB_EVENT, log);
                ReceivedHpbEventResponse typedResponse = new ReceivedHpbEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ReceivedHpbEventResponse> receivedHpbEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RECEIVEDHPB_EVENT));
        return receivedHpbEventFlowable(filter);
    }

    @Deprecated
    public static NodeIncentive load(String contractAddress, Web3 web3, Credentials credentials,
                                     BigInteger gasPrice, BigInteger gasLimit) {
        return new NodeIncentive(contractAddress, web3, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static NodeIncentive load(String contractAddress, Web3 web3,
                                     TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new NodeIncentive(contractAddress, web3, transactionManager, gasPrice, gasLimit);
    }

    public static NodeIncentive load(String contractAddress, Web3 web3, Credentials credentials,
                                     ContractGasProvider contractGasProvider) {
        return new NodeIncentive(contractAddress, web3, credentials, contractGasProvider);
    }

    public static NodeIncentive load(String contractAddress, Web3 web3,
                                     TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new NodeIncentive(contractAddress, web3, transactionManager, contractGasProvider);
    }

    public static RemoteCall<NodeIncentive> deploy(Web3 web3, Credentials credentials,
                                                   ContractGasProvider contractGasProvider, BigInteger initialWeiValue) {
        return deployRemoteCall(NodeIncentive.class, web3, credentials, contractGasProvider, BINARY, "", initialWeiValue);
    }

    public static RemoteCall<NodeIncentive> deploy(Web3 web3, TransactionManager transactionManager,
                                                   ContractGasProvider contractGasProvider, BigInteger initialWeiValue) {
        return deployRemoteCall(NodeIncentive.class, web3, transactionManager, contractGasProvider, BINARY, "", initialWeiValue);
    }

    @Deprecated
    public static RemoteCall<NodeIncentive> deploy(Web3 web3, Credentials credentials,
                                                   BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployRemoteCall(NodeIncentive.class, web3, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    @Deprecated
    public static RemoteCall<NodeIncentive> deploy(Web3 web3, TransactionManager transactionManager,
                                                   BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployRemoteCall(NodeIncentive.class, web3, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static class ApprovalForEventResponse {
        public Log log;

        public Boolean approved;

        public String operator;

        public String owner;
    }

    public static class ToVoteBonusEventResponse {
        public Log log;

        public String candidateAddr;

        public String voterAddr;

        public BigInteger score;

        public BigInteger bonus;
    }

    public static class SendBonusEventResponse {
        public Log log;

        public String candidateAddr;

        public BigInteger score;

        public BigInteger bonus;
    }

    public static class ReceivedHpbEventResponse {
        public Log log;

        public String sender;

        public BigInteger amount;
    }
}
