package com.hpb.bc.contract.hpb;

import io.hpb.web3.abi.EventEncoder;
import io.hpb.web3.abi.TypeReference;
import io.hpb.web3.abi.datatypes.*;
import io.hpb.web3.abi.datatypes.generated.Uint256;
import io.hpb.web3.crypto.Credentials;
import io.hpb.web3.protocol.Web3;
import io.hpb.web3.protocol.core.DefaultBlockParameter;
import io.hpb.web3.protocol.core.RemoteCall;
import io.hpb.web3.protocol.core.methods.request.HpbFilter;
import io.hpb.web3.protocol.core.methods.response.Log;
import io.hpb.web3.protocol.core.methods.response.TransactionReceipt;
import io.hpb.web3.tuples.generated.Tuple2;
import io.hpb.web3.tx.Contract;
import io.hpb.web3.tx.TransactionManager;
import io.hpb.web3.tx.gas.ContractGasProvider;
import io.reactivex.Flowable;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the the io.hpb.web3.codegen.SolidityFunctionWrapperGenerator to update.
 *
 * <p>Generated with web3 version none.
 */
@SuppressWarnings({
        "rawtypes",
        "unchecked"
})
public class NodeBallot extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_FETCHALLVOTERESULT = "fetchAllVoteResult";

    public static final String FUNC_FETCHVOTENUMFORVOTER = "fetchVoteNumForVoter";

    public static final String FUNC_INITHOLDERADDR = "initHolderAddr";

    public static final String FUNC_CALVOTERESULT = "calVoteResult";

    public static final String FUNC_FETCHVOTEINFOFORVOTER = "fetchVoteInfoForVoter";

    public static final String FUNC_MINLIMIT = "minLimit";

    public static final String FUNC_DELETEADMIN = "deleteAdmin";

    public static final String FUNC_ISHOLDERADDREXIST = "isHolderAddrExist";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_SETGASLEFTLIMIT = "setGasLeftLimit";

    public static final String FUNC_ADDCANDIDATE = "addCandidate";

    public static final String FUNC_SETHOLDERADDR = "setHolderAddr";

    public static final String FUNC_FETCHALLCANDIDATES = "fetchAllCandidates";

    public static final String FUNC_KILL = "kill";

    public static final String FUNC_ISRUNUPSTAGE = "isRunUpStage";

    public static final String FUNC_FETCHVOTENUMFORVOTERTOCANDIDATE = "fetchVoteNumForVoterToCandidate";

    public static final String FUNC_CAPACITY = "capacity";

    public static final String FUNC_SETMINLIMIT = "setMinLimit";

    public static final String FUNC_ADDADMIN = "addAdmin";

    public static final String FUNC_UPDATECOINBASE = "updateCoinBase";

    public static final String FUNC_FETCHVOTENUMFORCANDIDATE = "fetchVoteNumForCandidate";

    public static final String FUNC_UPDATECANDIDATEADDR = "updateCandidateAddr";

    public static final String FUNC_SETDEFAULTMONITOR = "setDefaultMonitor";

    public static final String FUNC_REFRESHVOTEFORALL = "refreshVoteForAll";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_REFRESHVOTEFORVOTER = "refreshVoteForVoter";

    public static final String FUNC_SETCAPACITY = "setCapacity";

    public static final String FUNC_DELETECANDIDATE = "deleteCandidate";

    public static final String FUNC_ISAPPROVED = "isApproved";

    public static final String FUNC_GETALLCOINBASES = "getAllCoinBases";

    public static final String FUNC_FETCHALLVOTERADDRS = "fetchAllVoterAddrs";

    public static final String FUNC_ADDCOINBASE = "addCoinBase";

    public static final String FUNC_FETCHALLVOTERS = "fetchAllVoters";

    public static final String FUNC_GETHOLDERADDR = "getHolderAddr";

    public static final String FUNC_BATCHVOTE = "batchVote";

    public static final String FUNC__DEFAULTMONITOR = "_defaultMonitor";

    public static final String FUNC_SETAPPROVAL = "setApproval";

    public static final String FUNC_ADMINMAP = "adminMap";

    public static final String FUNC_CANCELVOTEFORCANDIDATE = "cancelVoteForCandidate";

    public static final String FUNC_VOTE = "vote";

    public static final String FUNC_FETCHVOTEINFOFORCANDIDATE = "fetchVoteInfoForCandidate";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_SETDEFAULTOPERATOR = "setDefaultOperator";

    public static final Event APPROVALFOR_EVENT = new Event("ApprovalFor",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event CANDIDATEADDED_EVENT = new Event("CandidateAdded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event ADDCOINBASE_EVENT = new Event("AddCoinBase",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event UPDATECOINBASE_EVENT = new Event("UpdateCoinBase",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event SETHOLDERADDR_EVENT = new Event("SetHolderAddr",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event CANDIDATEDELETED_EVENT = new Event("CandidateDeleted",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event UPDATECANDIDATEADDR_EVENT = new Event("UpdateCandidateAddr",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event DOVOTED_EVENT = new Event("DoVoted",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event RECEIVEDHPB_EVENT = new Event("ReceivedHpb",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected NodeBallot(String contractAddress, Web3 web3, Credentials credentials,
                         BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3, credentials, gasPrice, gasLimit);
    }

    protected NodeBallot(String contractAddress, Web3 web3, Credentials credentials,
                         ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3, credentials, contractGasProvider);
    }

    @Deprecated
    protected NodeBallot(String contractAddress, Web3 web3, TransactionManager transactionManager,
                         BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3, transactionManager, gasPrice, gasLimit);
    }

    protected NodeBallot(String contractAddress, Web3 web3, TransactionManager transactionManager,
                         ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3, transactionManager, contractGasProvider);
    }

    public RemoteCall<Tuple2<List<String>, List<BigInteger>>> fetchAllVoteResult() {
        final Function function = new Function(FUNC_FETCHALLVOTERESULT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple2<List<String>, List<BigInteger>>>(
                new Callable<Tuple2<List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<String>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()),
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<BigInteger> fetchVoteNumForVoter(String voterAddr) {
        final Function function = new Function(FUNC_FETCHVOTENUMFORVOTER,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(voterAddr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> initHolderAddr(String _coinBase, String _holderAddr) {
        final Function function = new Function(
                FUNC_INITHOLDERADDR,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_coinBase),
                new io.hpb.web3.abi.datatypes.Address(_holderAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> calVoteResult() {
        final Function function = new Function(
                FUNC_CALVOTERESULT,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<List<String>, List<BigInteger>>> fetchVoteInfoForVoter(String voterAddr) {
        final Function function = new Function(FUNC_FETCHVOTEINFOFORVOTER,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(voterAddr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple2<List<String>, List<BigInteger>>>(
                new Callable<Tuple2<List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<String>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()),
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<BigInteger> minLimit() {
        final Function function = new Function(FUNC_MINLIMIT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> deleteAdmin(String addr) {
        final Function function = new Function(
                FUNC_DELETEADMIN,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isHolderAddrExist(String _holderAddr) {
        final Function function = new Function(FUNC_ISHOLDERADDREXIST,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_holderAddr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> withdraw(BigInteger _value, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_WITHDRAW,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> setGasLeftLimit(BigInteger gasLeftLimit) {
        final Function function = new Function(
                FUNC_SETGASLEFTLIMIT,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(gasLeftLimit)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addCandidate(String _candidateAddr) {
        final Function function = new Function(
                FUNC_ADDCANDIDATE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_candidateAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setHolderAddr(String _coinBase, String _holderAddr) {
        final Function function = new Function(
                FUNC_SETHOLDERADDR,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_coinBase),
                new io.hpb.web3.abi.datatypes.Address(_holderAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> fetchAllCandidates() {
        final Function function = new Function(FUNC_FETCHALLCANDIDATES,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> kill() {
        final Function function = new Function(
                FUNC_KILL,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isRunUpStage() {
        final Function function = new Function(FUNC_ISRUNUPSTAGE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> fetchVoteNumForVoterToCandidate(String voterAddr,
                                                                  String candidateAddr) {
        final Function function = new Function(FUNC_FETCHVOTENUMFORVOTERTOCANDIDATE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(voterAddr),
                new io.hpb.web3.abi.datatypes.Address(candidateAddr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> capacity() {
        final Function function = new Function(FUNC_CAPACITY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setMinLimit(BigInteger _minLimit) {
        final Function function = new Function(
                FUNC_SETMINLIMIT,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(_minLimit)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addAdmin(String addr) {
        final Function function = new Function(
                FUNC_ADDADMIN,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateCoinBase(String _coinBase, String _newCoinBase) {
        final Function function = new Function(
                FUNC_UPDATECOINBASE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_coinBase),
                new io.hpb.web3.abi.datatypes.Address(_newCoinBase)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> fetchVoteNumForCandidate(String candidateAddr) {
        final Function function = new Function(FUNC_FETCHVOTENUMFORCANDIDATE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(candidateAddr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> updateCandidateAddr(String _candidateAddr,
                                                              String _newCandidateAddr) {
        final Function function = new Function(
                FUNC_UPDATECANDIDATEADDR,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_candidateAddr),
                new io.hpb.web3.abi.datatypes.Address(_newCandidateAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setDefaultMonitor(String defaultMonitor) {
        final Function function = new Function(
                FUNC_SETDEFAULTMONITOR,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(defaultMonitor)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> refreshVoteForAll() {
        final Function function = new Function(
                FUNC_REFRESHVOTEFORALL,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getOwner() {
        final Function function = new Function(FUNC_GETOWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> refreshVoteForVoter(String voterAddr) {
        final Function function = new Function(
                FUNC_REFRESHVOTEFORVOTER,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(voterAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setCapacity(BigInteger _capacity) {
        final Function function = new Function(
                FUNC_SETCAPACITY,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.generated.Uint256(_capacity)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> deleteCandidate(String _candidateAddr) {
        final Function function = new Function(
                FUNC_DELETECANDIDATE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_candidateAddr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isApproved(String addr, String operator) {
        final Function function = new Function(FUNC_ISAPPROVED,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(addr),
                new io.hpb.web3.abi.datatypes.Address(operator)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<List> getAllCoinBases() {
        final Function function = new Function(FUNC_GETALLCOINBASES,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<List> fetchAllVoterAddrs() {
        final Function function = new Function(FUNC_FETCHALLVOTERADDRS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> addCoinBase(String _coinBase) {
        final Function function = new Function(
                FUNC_ADDCOINBASE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_coinBase)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<List<String>, List<BigInteger>>> fetchAllVoters() {
        final Function function = new Function(FUNC_FETCHALLVOTERS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple2<List<String>, List<BigInteger>>>(
                new Callable<Tuple2<List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<String>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()),
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<String> getHolderAddr(String _coinBase) {
        final Function function = new Function(FUNC_GETHOLDERADDR,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(_coinBase)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> batchVote(String voterAddr, List<String> candidateAddrs,
                                                    List<BigInteger> nums) {
        final Function function = new Function(
                FUNC_BATCHVOTE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(voterAddr),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.Address>(
                        io.hpb.web3.abi.datatypes.Address.class,
                        io.hpb.web3.abi.Utils.typeMap(candidateAddrs, io.hpb.web3.abi.datatypes.Address.class)),
                new io.hpb.web3.abi.datatypes.DynamicArray<io.hpb.web3.abi.datatypes.generated.Uint256>(
                        io.hpb.web3.abi.datatypes.generated.Uint256.class,
                        io.hpb.web3.abi.Utils.typeMap(nums, io.hpb.web3.abi.datatypes.generated.Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> _defaultMonitor() {
        final Function function = new Function(FUNC__DEFAULTMONITOR,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> setApproval(String to, Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVAL,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(to),
                new io.hpb.web3.abi.datatypes.Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> adminMap(String param0) {
        final Function function = new Function(FUNC_ADMINMAP,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> cancelVoteForCandidate(String voterAddr,
                                                                 String candidateAddr, BigInteger num) {
        final Function function = new Function(
                FUNC_CANCELVOTEFORCANDIDATE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(voterAddr),
                new io.hpb.web3.abi.datatypes.Address(candidateAddr),
                new io.hpb.web3.abi.datatypes.generated.Uint256(num)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> vote(String voterAddr, String candidateAddr,
                                               BigInteger num) {
        final Function function = new Function(
                FUNC_VOTE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(voterAddr),
                new io.hpb.web3.abi.datatypes.Address(candidateAddr),
                new io.hpb.web3.abi.datatypes.generated.Uint256(num)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<List<String>, List<BigInteger>>> fetchVoteInfoForCandidate(String candidateAddr) {
        final Function function = new Function(FUNC_FETCHVOTEINFOFORCANDIDATE,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(candidateAddr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple2<List<String>, List<BigInteger>>>(
                new Callable<Tuple2<List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<String>, List<BigInteger>>(
                                convertToNative((List<Address>) results.get(0).getValue()),
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setDefaultOperator(String defaultOperator) {
        final Function function = new Function(
                FUNC_SETDEFAULTOPERATOR,
                Arrays.<Type>asList(new io.hpb.web3.abi.datatypes.Address(defaultOperator)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<ApprovalForEventResponse> getApprovalForEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFOR_EVENT, transactionReceipt);
        ArrayList<ApprovalForEventResponse> responses = new ArrayList<ApprovalForEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForEventResponse typedResponse = new ApprovalForEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.approved = (Boolean) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForEventResponse> approvalForEventFlowable(HpbFilter filter) {
        return web3.hpbLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ApprovalForEventResponse>() {
            @Override
            public ApprovalForEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFOR_EVENT, log);
                ApprovalForEventResponse typedResponse = new ApprovalForEventResponse();
                typedResponse.log = log;
                typedResponse.approved = (Boolean) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.owner = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForEventResponse> approvalForEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFOR_EVENT));
        return approvalForEventFlowable(filter);
    }

    public List<CandidateAddedEventResponse> getCandidateAddedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CANDIDATEADDED_EVENT, transactionReceipt);
        ArrayList<CandidateAddedEventResponse> responses = new ArrayList<CandidateAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CandidateAddedEventResponse typedResponse = new CandidateAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.candidateAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CandidateAddedEventResponse> candidateAddedEventFlowable(HpbFilter filter) {
        return web3.hpbLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CandidateAddedEventResponse>() {
            @Override
            public CandidateAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CANDIDATEADDED_EVENT, log);
                CandidateAddedEventResponse typedResponse = new CandidateAddedEventResponse();
                typedResponse.log = log;
                typedResponse.candidateAddr = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CandidateAddedEventResponse> candidateAddedEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CANDIDATEADDED_EVENT));
        return candidateAddedEventFlowable(filter);
    }

    public List<AddCoinBaseEventResponse> getAddCoinBaseEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ADDCOINBASE_EVENT, transactionReceipt);
        ArrayList<AddCoinBaseEventResponse> responses = new ArrayList<AddCoinBaseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddCoinBaseEventResponse typedResponse = new AddCoinBaseEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.coinBase = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddCoinBaseEventResponse> addCoinBaseEventFlowable(HpbFilter filter) {
        return web3.hpbLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AddCoinBaseEventResponse>() {
            @Override
            public AddCoinBaseEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADDCOINBASE_EVENT, log);
                AddCoinBaseEventResponse typedResponse = new AddCoinBaseEventResponse();
                typedResponse.log = log;
                typedResponse.coinBase = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AddCoinBaseEventResponse> addCoinBaseEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDCOINBASE_EVENT));
        return addCoinBaseEventFlowable(filter);
    }

    public List<UpdateCoinBaseEventResponse> getUpdateCoinBaseEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATECOINBASE_EVENT, transactionReceipt);
        ArrayList<UpdateCoinBaseEventResponse> responses = new ArrayList<UpdateCoinBaseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateCoinBaseEventResponse typedResponse = new UpdateCoinBaseEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.coinBase = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newCoinBase = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpdateCoinBaseEventResponse> updateCoinBaseEventFlowable(HpbFilter filter) {
        return web3.hpbLogFlowable(filter).map(new io.reactivex.functions.Function<Log, UpdateCoinBaseEventResponse>() {
            @Override
            public UpdateCoinBaseEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATECOINBASE_EVENT, log);
                UpdateCoinBaseEventResponse typedResponse = new UpdateCoinBaseEventResponse();
                typedResponse.log = log;
                typedResponse.coinBase = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newCoinBase = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpdateCoinBaseEventResponse> updateCoinBaseEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATECOINBASE_EVENT));
        return updateCoinBaseEventFlowable(filter);
    }

    public List<SetHolderAddrEventResponse> getSetHolderAddrEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SETHOLDERADDR_EVENT, transactionReceipt);
        ArrayList<SetHolderAddrEventResponse> responses = new ArrayList<SetHolderAddrEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetHolderAddrEventResponse typedResponse = new SetHolderAddrEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.coinBase = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.holderAddr = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetHolderAddrEventResponse> setHolderAddrEventFlowable(HpbFilter filter) {
        return web3.hpbLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SetHolderAddrEventResponse>() {
            @Override
            public SetHolderAddrEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETHOLDERADDR_EVENT, log);
                SetHolderAddrEventResponse typedResponse = new SetHolderAddrEventResponse();
                typedResponse.log = log;
                typedResponse.coinBase = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.holderAddr = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetHolderAddrEventResponse> setHolderAddrEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETHOLDERADDR_EVENT));
        return setHolderAddrEventFlowable(filter);
    }

    public List<CandidateDeletedEventResponse> getCandidateDeletedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CANDIDATEDELETED_EVENT, transactionReceipt);
        ArrayList<CandidateDeletedEventResponse> responses = new ArrayList<CandidateDeletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CandidateDeletedEventResponse typedResponse = new CandidateDeletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.candidateAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CandidateDeletedEventResponse> candidateDeletedEventFlowable(HpbFilter filter) {
        return web3.hpbLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CandidateDeletedEventResponse>() {
            @Override
            public CandidateDeletedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CANDIDATEDELETED_EVENT, log);
                CandidateDeletedEventResponse typedResponse = new CandidateDeletedEventResponse();
                typedResponse.log = log;
                typedResponse.candidateAddr = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CandidateDeletedEventResponse> candidateDeletedEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CANDIDATEDELETED_EVENT));
        return candidateDeletedEventFlowable(filter);
    }

    public List<UpdateCandidateAddrEventResponse> getUpdateCandidateAddrEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATECANDIDATEADDR_EVENT, transactionReceipt);
        ArrayList<UpdateCandidateAddrEventResponse> responses = new ArrayList<UpdateCandidateAddrEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateCandidateAddrEventResponse typedResponse = new UpdateCandidateAddrEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._candidateAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._newCandidateAddr = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpdateCandidateAddrEventResponse> updateCandidateAddrEventFlowable(HpbFilter filter) {
        return web3.hpbLogFlowable(filter).map(new io.reactivex.functions.Function<Log, UpdateCandidateAddrEventResponse>() {
            @Override
            public UpdateCandidateAddrEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATECANDIDATEADDR_EVENT, log);
                UpdateCandidateAddrEventResponse typedResponse = new UpdateCandidateAddrEventResponse();
                typedResponse.log = log;
                typedResponse._candidateAddr = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._newCandidateAddr = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpdateCandidateAddrEventResponse> updateCandidateAddrEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATECANDIDATEADDR_EVENT));
        return updateCandidateAddrEventFlowable(filter);
    }

    public List<DoVotedEventResponse> getDoVotedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DOVOTED_EVENT, transactionReceipt);
        ArrayList<DoVotedEventResponse> responses = new ArrayList<DoVotedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DoVotedEventResponse typedResponse = new DoVotedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.flag = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.candidateAddr = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.voteAddr = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.num = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DoVotedEventResponse> doVotedEventFlowable(HpbFilter filter) {
        return web3.hpbLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DoVotedEventResponse>() {
            @Override
            public DoVotedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DOVOTED_EVENT, log);
                DoVotedEventResponse typedResponse = new DoVotedEventResponse();
                typedResponse.log = log;
                typedResponse.flag = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.candidateAddr = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.voteAddr = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.num = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DoVotedEventResponse> doVotedEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DOVOTED_EVENT));
        return doVotedEventFlowable(filter);
    }

    public List<ReceivedHpbEventResponse> getReceivedHpbEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(RECEIVEDHPB_EVENT, transactionReceipt);
        ArrayList<ReceivedHpbEventResponse> responses = new ArrayList<ReceivedHpbEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReceivedHpbEventResponse typedResponse = new ReceivedHpbEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReceivedHpbEventResponse> receivedHpbEventFlowable(HpbFilter filter) {
        return web3.hpbLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ReceivedHpbEventResponse>() {
            @Override
            public ReceivedHpbEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RECEIVEDHPB_EVENT, log);
                ReceivedHpbEventResponse typedResponse = new ReceivedHpbEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ReceivedHpbEventResponse> receivedHpbEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        HpbFilter filter = new HpbFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RECEIVEDHPB_EVENT));
        return receivedHpbEventFlowable(filter);
    }

    @Deprecated
    public static NodeBallot load(String contractAddress, Web3 web3, Credentials credentials,
                                  BigInteger gasPrice, BigInteger gasLimit) {
        return new NodeBallot(contractAddress, web3, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static NodeBallot load(String contractAddress, Web3 web3,
                                  TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new NodeBallot(contractAddress, web3, transactionManager, gasPrice, gasLimit);
    }

    public static NodeBallot load(String contractAddress, Web3 web3, Credentials credentials,
                                  ContractGasProvider contractGasProvider) {
        return new NodeBallot(contractAddress, web3, credentials, contractGasProvider);
    }

    public static NodeBallot load(String contractAddress, Web3 web3,
                                  TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new NodeBallot(contractAddress, web3, transactionManager, contractGasProvider);
    }

    public static RemoteCall<NodeBallot> deploy(Web3 web3, Credentials credentials,
                                                ContractGasProvider contractGasProvider, BigInteger initialWeiValue) {
        return deployRemoteCall(NodeBallot.class, web3, credentials, contractGasProvider, BINARY, "", initialWeiValue);
    }

    public static RemoteCall<NodeBallot> deploy(Web3 web3, TransactionManager transactionManager,
                                                ContractGasProvider contractGasProvider, BigInteger initialWeiValue) {
        return deployRemoteCall(NodeBallot.class, web3, transactionManager, contractGasProvider, BINARY, "", initialWeiValue);
    }

    @Deprecated
    public static RemoteCall<NodeBallot> deploy(Web3 web3, Credentials credentials,
                                                BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployRemoteCall(NodeBallot.class, web3, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    @Deprecated
    public static RemoteCall<NodeBallot> deploy(Web3 web3, TransactionManager transactionManager,
                                                BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployRemoteCall(NodeBallot.class, web3, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static class ApprovalForEventResponse {
        public Log log;

        public Boolean approved;

        public String operator;

        public String owner;
    }

    public static class CandidateAddedEventResponse {
        public Log log;

        public String candidateAddr;
    }

    public static class AddCoinBaseEventResponse {
        public Log log;

        public String coinBase;
    }

    public static class UpdateCoinBaseEventResponse {
        public Log log;

        public String coinBase;

        public String newCoinBase;
    }

    public static class SetHolderAddrEventResponse {
        public Log log;

        public String coinBase;

        public String holderAddr;
    }

    public static class CandidateDeletedEventResponse {
        public Log log;

        public String candidateAddr;
    }

    public static class UpdateCandidateAddrEventResponse {
        public Log log;

        public String _candidateAddr;

        public String _newCandidateAddr;
    }

    public static class DoVotedEventResponse {
        public Log log;

        public BigInteger flag;

        public String candidateAddr;

        public String voteAddr;

        public BigInteger num;
    }

    public static class ReceivedHpbEventResponse {
        public Log log;

        public String sender;

        public BigInteger amount;
    }
}
